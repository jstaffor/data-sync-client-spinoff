"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:no-var-requires
var version = require("../../../package.json").version;
var CordovaAppMetrics = /** @class */ (function () {
    function CordovaAppMetrics() {
        this.identifier = "app";
        this.cachedPayload = undefined;
    }
    /**
     * Get app metrics, to be called after deviceReady event.
     *
     * It uses cordova-plugin-app-version to get the app version, the rest of the metrics are to be
     * filled up by the app itself.
     * @returns {Promise<AppMetrics>} A promise containing the app metrics
     */
    CordovaAppMetrics.prototype.collect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.cachedPayload) {
                return resolve(_this.cachedPayload);
            }
            if (!document) {
                return Promise.reject(new Error("Metrics not running in browser environment"));
            }
            document.addEventListener("deviceready", function () {
                if (!window || !window.cordova || !window.cordova.getAppVersion) {
                    return reject("Missing required plugin to collect metrics. Verify the " +
                        "@aerogear/cordova-plugin-aerogear-metrics plugin is installed.");
                }
                var app = window.cordova.getAppVersion;
                Promise.all([
                    app.getPackageName(),
                    app.getVersionNumber()
                ])
                    .then(function (results) {
                    _this.cachedPayload = {
                        appId: results[0],
                        appVersion: results[1],
                        sdkVersion: version,
                        framework: "cordova"
                    };
                    resolve(_this.cachedPayload);
                });
            }, false);
        });
    };
    return CordovaAppMetrics;
}());
exports.CordovaAppMetrics = CordovaAppMetrics;
//# sourceMappingURL=CordovaAppMetrics.js.map