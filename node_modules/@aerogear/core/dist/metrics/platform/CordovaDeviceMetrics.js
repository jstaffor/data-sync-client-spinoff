"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CordovaDeviceMetrics = /** @class */ (function () {
    function CordovaDeviceMetrics() {
        this.identifier = "device";
        this.cachedPayload = undefined;
    }
    /**
     * Get device metrics, to be called after deviceReady event
     *
     * It uses cordova-plugin-device plugin.
     * @returns {Promise<DeviceMetrics>} The device metrics
     */
    CordovaDeviceMetrics.prototype.collect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.cachedPayload) {
                return resolve(_this.cachedPayload);
            }
            if (!document) {
                return Promise.reject(new Error("Metrics not running in browser environment"));
            }
            document.addEventListener("deviceready", function () {
                if (!window || !window.device) {
                    return reject("Missing required plugin to collect metrics. Verify the " +
                        "@aerogear/cordova-plugin-aerogear-metrics plugin is installed.");
                }
                _this.cachedPayload = {
                    platform: window.device.platform.toLowerCase(),
                    platformVersion: window.device.version,
                    device: window.device.model
                };
                return resolve(_this.cachedPayload);
            }, false);
        });
    };
    return CordovaDeviceMetrics;
}());
exports.CordovaDeviceMetrics = CordovaDeviceMetrics;
//# sourceMappingURL=CordovaDeviceMetrics.js.map