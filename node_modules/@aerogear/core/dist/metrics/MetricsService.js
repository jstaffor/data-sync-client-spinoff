"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var loglevel_1 = __importDefault(require("loglevel"));
var PlatformUtils_1 = require("../PlatformUtils");
var publisher_1 = require("./publisher");
var DefaultMetricsBuilder_1 = require("./DefaultMetricsBuilder");
/**
 * AeroGear Metrics SDK
 * Provides internal api for metrics that are sent to metrics server.
 */
var MetricsService = /** @class */ (function () {
    // constructor params are there to provide a mechanism to override the metricsBuilder and metricsPublisher before
    // the initial sendAppAndDeviceMetrics() execution happens. this is necessary in tests
    function MetricsService(options) {
        var configuration = options.configuration;
        if (configuration && configuration.length > 0) {
            this.configuration = configuration[0];
        }
        this.builder = options && options.builder
            ? options.builder
            : new DefaultMetricsBuilder_1.DefaultMetricsBuilder();
        if (this.configuration) {
            this.defaultMetrics = this.builder.buildDefaultMetrics();
            this.publisher = options && options.publisher
                ? options.publisher
                : new publisher_1.NetworkMetricsPublisher(this.configuration.url);
        }
        else {
            loglevel_1.default.warn("Metrics configuration is missing." +
                "Metrics will not be published to remote server.");
        }
    }
    Object.defineProperty(MetricsService.prototype, "metricsPublisher", {
        get: function () {
            return this.publisher;
        },
        set: function (publisher) {
            this.publisher = publisher;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetricsService.prototype, "metricsBuilder", {
        get: function () {
            return this.builder;
        },
        set: function (builder) {
            this.builder = builder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Publish metrics using predefined publisher
     *
     * @param type type of the metrics to be published
     * @param metrics metrics instances that should be published
     */
    MetricsService.prototype.publish = function (type, metrics) {
        return __awaiter(this, void 0, void 0, function () {
            var publisher, err, err, payload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!type) {
                            throw new Error("Type is invalid: " + type);
                        }
                        publisher = this.publisher;
                        if (!publisher || !this.defaultMetrics) {
                            err = new Error("Metrics server configuration is missing. Metrics will be disabled.");
                            loglevel_1.default.warn(err);
                            return [2 /*return*/, Promise.reject(err)];
                        }
                        if (!PlatformUtils_1.isNative()) {
                            err = new Error("Metrics implementation is disabled for browser platform.");
                            loglevel_1.default.warn(err);
                            return [2 /*return*/, Promise.reject(err)];
                        }
                        metrics = metrics.concat(this.defaultMetrics);
                        return [4 /*yield*/, this.builder.buildMetricsPayload(type, metrics)];
                    case 1:
                        payload = _a.sent();
                        return [2 /*return*/, publisher.publish(payload)];
                }
            });
        });
    };
    /**
     * Collect metrics for all active metrics collectors
     * Send data using metrics publisher
     */
    MetricsService.prototype.sendAppAndDeviceMetrics = function () {
        return this.publish(MetricsService.DEFAULT_METRICS_TYPE, []).catch(function (error) {
            loglevel_1.default.error("Error when sending metrics", JSON.stringify(error, Object.getOwnPropertyNames(error)));
        });
    };
    MetricsService.CLIENT_ID_KEY = "aerogear_metrics_client_key";
    MetricsService.DEFAULT_METRICS_TYPE = "init";
    MetricsService.TYPE = "metrics";
    return MetricsService;
}());
exports.MetricsService = MetricsService;
//# sourceMappingURL=MetricsService.js.map