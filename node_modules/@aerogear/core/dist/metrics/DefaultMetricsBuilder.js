"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var loglevel_1 = __importDefault(require("loglevel"));
var v1_1 = __importDefault(require("uuid/v1"));
var PlatformUtils_1 = require("../PlatformUtils");
var CordovaAppMetrics_1 = require("./platform/CordovaAppMetrics");
var CordovaDeviceMetrics_1 = require("./platform/CordovaDeviceMetrics");
var DefaultMetricsBuilder = /** @class */ (function () {
    function DefaultMetricsBuilder(storage) {
        this.storage = storage || window.localStorage;
    }
    /**
     * Generates or gets mobile client id
     */
    DefaultMetricsBuilder.prototype.getClientId = function () {
        var clientId = this.getSavedClientId();
        if (!clientId) {
            clientId = v1_1.default();
            this.saveClientId(clientId);
        }
        return clientId;
    };
    DefaultMetricsBuilder.prototype.getSavedClientId = function () {
        return this.storage.getItem(DefaultMetricsBuilder.CLIENT_ID_KEY);
    };
    DefaultMetricsBuilder.prototype.saveClientId = function (id) {
        this.storage.setItem(DefaultMetricsBuilder.CLIENT_ID_KEY, id);
    };
    /**
     * Builds array of default metrics objects that are sent to server on every request.
     * Other platforms can override this method to provide custom behavior
     */
    DefaultMetricsBuilder.prototype.buildDefaultMetrics = function () {
        if (PlatformUtils_1.isMobileCordova()) {
            return [new CordovaAppMetrics_1.CordovaAppMetrics(), new CordovaDeviceMetrics_1.CordovaDeviceMetrics()];
        }
        else {
            // No support of other platforms in default implementation.
            // Please extend MetricsService class.
            loglevel_1.default.warn("Current platform is not supported by metrics.");
            return [];
        }
    };
    /**
     * Builds the payload
     * @param type string
     * @param metrics Metrics array, typically can be new buildDefaultMetrics()
     * returns promise with metrics payload
     */
    DefaultMetricsBuilder.prototype.buildMetricsPayload = function (type, metrics) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, _i, metrics_1, metric, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        payload = {
                            clientId: this.getClientId(),
                            type: type,
                            timestamp: new Date().getTime(),
                            data: {}
                        };
                        _i = 0, metrics_1 = metrics;
                        _c.label = 1;
                    case 1:
                        if (!(_i < metrics_1.length)) return [3 /*break*/, 4];
                        metric = metrics_1[_i];
                        _a = payload.data;
                        _b = metric.identifier;
                        return [4 /*yield*/, metric.collect()];
                    case 2:
                        _a[_b] = _c.sent();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, payload];
                }
            });
        });
    };
    DefaultMetricsBuilder.CLIENT_ID_KEY = "aerogear_metrics_client_key";
    return DefaultMetricsBuilder;
}());
exports.DefaultMetricsBuilder = DefaultMetricsBuilder;
//# sourceMappingURL=DefaultMetricsBuilder.js.map