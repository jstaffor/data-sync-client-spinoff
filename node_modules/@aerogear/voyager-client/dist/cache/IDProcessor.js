"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createOptimisticResponse_1 = require("./createOptimisticResponse");
/**
 * Allow updates on items created while offline.
 * If item is created while offline and client generated ID is provided
 * to optimisticResponse, later mutations on this item will be using this client
 * generated ID. Once any create operation is successful, we should
 * update entries in queue with ID returned from server.
 */
var IDProcessor = /** @class */ (function () {
    function IDProcessor() {
    }
    IDProcessor.prototype.execute = function (queue, entry, result) {
        var operationName = entry.operation.operationName, optimisticResponse = entry.optimisticResponse;
        if (!result ||
            !optimisticResponse ||
            !optimisticResponse[operationName] ||
            !createOptimisticResponse_1.isClientGeneratedId(optimisticResponse[operationName].id)) {
            return;
        }
        var clientId = optimisticResponse && optimisticResponse[operationName].id;
        queue.forEach(function (_a) {
            var op = _a.operation;
            if (op.variables.id === clientId) {
                op.variables.id = result.data && result.data[operationName].id;
            }
        });
    };
    return IDProcessor;
}());
exports.IDProcessor = IDProcessor;
//# sourceMappingURL=IDProcessor.js.map