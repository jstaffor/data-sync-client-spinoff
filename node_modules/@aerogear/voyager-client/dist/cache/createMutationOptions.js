"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CacheOperation_1 = require("./CacheOperation");
var createOptimisticResponse_1 = require("./createOptimisticResponse");
var helpers_1 = require("../utils/helpers");
var util_1 = require("util");
exports.createMutationOptions = function (options) {
    var mutation = options.mutation, variables = options.variables, updateQuery = options.updateQuery, typeName = options.typeName, _a = options.operationType, operationType = _a === void 0 ? CacheOperation_1.CacheOperation.ADD : _a, _b = options.idField, idField = _b === void 0 ? "id" : _b;
    var operationName = helpers_1.getOperationFieldName(mutation);
    var optimisticResponse = createOptimisticResponse_1.createOptimisticResponse({
        mutation: mutation,
        variables: variables,
        updateQuery: updateQuery,
        operationType: operationType,
        idField: idField,
        typeName: typeName
    });
    var update = function (cache, _a) {
        var data = _a.data;
        if (util_1.isArray(updateQuery)) {
            for (var _i = 0, updateQuery_1 = updateQuery; _i < updateQuery_1.length; _i++) {
                var query = updateQuery_1[_i];
                var updateFunction = exports.getUpdateFunction(operationName, idField, query, operationType);
                updateFunction(cache, { data: data });
            }
        }
        else {
            var updateFunction = exports.getUpdateFunction(operationName, idField, updateQuery, operationType);
            updateFunction(cache, { data: data });
        }
    };
    return { mutation: mutation, variables: variables, optimisticResponse: optimisticResponse, update: update };
};
/**
 * Generate the update function to update the cache for a given operation and query.
 * Ignores the scenario where the cache operation is an update as this is handled automatically
 * from Apollo Client 2.5 onwards.
 * @param operation The title of the operation being performed
 * @param idField The id field the item keys off
 * @param updateQuery The Query to update in the cache
 * @param opType The type of operation being performed
 */
exports.getUpdateFunction = function (operation, idField, updateQuery, opType) {
    var _a = helpers_1.deconstructQuery(updateQuery), query = _a.query, variables = _a.variables;
    var queryField = helpers_1.getOperationFieldName(query);
    var updateFunction;
    switch (opType) {
        case CacheOperation_1.CacheOperation.ADD:
            updateFunction = function (cache, _a) {
                var data = _a.data;
                try {
                    if (data) {
                        var queryResult = cache.readQuery({ query: query, variables: variables });
                        var operationData_1 = data[operation];
                        var result = queryResult[queryField];
                        if (result && operationData_1) {
                            if (!result.find(function (item) {
                                return item[idField] === operationData_1[idField];
                            })) {
                                result.push(operationData_1);
                            }
                        }
                        else {
                            queryResult = [result];
                        }
                        cache.writeQuery({
                            query: query,
                            variables: variables,
                            data: queryResult
                        });
                    }
                }
                catch (e) {
                    console.info(e);
                }
            };
            break;
        case CacheOperation_1.CacheOperation.DELETE:
            updateFunction = function (cache, _a) {
                var data = _a.data;
                try {
                    if (data) {
                        var queryResult = cache.readQuery({ query: query, variables: variables });
                        var operationData_2 = data[operation];
                        if (operationData_2) {
                            var newData = queryResult[queryField].filter(function (item) {
                                return operationData_2[idField] !== item[idField];
                            });
                            queryResult[queryField] = newData;
                            cache.writeQuery({
                                query: query,
                                variables: variables,
                                data: queryResult
                            });
                        }
                    }
                }
                catch (e) {
                    console.info(e);
                }
            };
            break;
        default:
            updateFunction = function () {
                return;
            };
    }
    return updateFunction;
};
//# sourceMappingURL=createMutationOptions.js.map