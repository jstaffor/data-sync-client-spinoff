"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../utils/helpers");
var CacheOperation_1 = require("./CacheOperation");
var CLIENT_ID_PREFIX = "client:";
// Returns true if ID was generated on client
exports.isClientGeneratedId = function (id) {
    return id && id.startsWith(CLIENT_ID_PREFIX);
};
// Helper method for ID generation ()
exports.generateId = function (length) {
    if (length === void 0) { length = 8; }
    var result = CLIENT_ID_PREFIX;
    var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (var i = length; i > 0; i -= 1) {
        result += chars[Math.floor(Math.random() * chars.length)];
    }
    return result;
};
/**
 * Create optimistic response.
 * For example:
 *
  optimisticResponse: {
      __typename: "Mutation",
      updateComment: {
        id: commentId,
        __typename: "Comment",
        content: commentContent
      }
    }
 *
 * For more info and examples see:
 * https://www.apollographql.com/docs/react/features/optimistic-ui.html
 *
 * @param operation operation that is being performed (update)
 * @param typeName type that is going to be returned
 * @param data actual data passed to function
 * @param addId generate client id for response
 * @param idField name of id field (default:id)
 */
exports.createOptimisticResponse = function (options) {
    var operation = helpers_1.getOperationFieldName(options.mutation);
    var typeName = options.typeName, variables = options.variables, _a = options.idField, idField = _a === void 0 ? "id" : _a, operationType = options.operationType;
    var optimisticResponse = {
        __typename: "Mutation"
    };
    optimisticResponse[operation] = __assign({ __typename: typeName }, variables, { optimisticResponse: true });
    if (operationType === CacheOperation_1.CacheOperation.ADD) {
        optimisticResponse[operation][idField] = exports.generateId();
    }
    return optimisticResponse;
};
//# sourceMappingURL=createOptimisticResponse.js.map