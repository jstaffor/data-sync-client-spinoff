"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CacheOperation_1 = require("./CacheOperation");
var __1 = require("..");
/**
 * Helper function which can be used to call subscribeToMore for multiple SubscriptionHelperOptions
 * @param observableQuery the query which you would like to call subscribeToMore on.
 * @param arrayOfHelperOptions the array of `SubscriptionHelperOptions`
 */
exports.subscribeToMoreHelper = function (observableQuery, arrayOfHelperOptions) {
    for (var _i = 0, arrayOfHelperOptions_1 = arrayOfHelperOptions; _i < arrayOfHelperOptions_1.length; _i++) {
        var option = arrayOfHelperOptions_1[_i];
        observableQuery.subscribeToMore(exports.createSubscriptionOptions(option));
    }
};
/**
 * Creates a SubscribeToMoreOptions object which can be used with Apollo Client's subscribeToMore function
 * on an observable query.
 * @param options see `SubscriptionHelperOptions`
 */
exports.createSubscriptionOptions = function (options) {
    var subscriptionQuery = options.subscriptionQuery, cacheUpdateQuery = options.cacheUpdateQuery, operationType = options.operationType, _a = options.idField, idField = _a === void 0 ? "id" : _a;
    var document = (subscriptionQuery && subscriptionQuery.query)
        || subscriptionQuery;
    var variables = (subscriptionQuery && subscriptionQuery.variables)
        || {};
    var query = (cacheUpdateQuery && cacheUpdateQuery.query)
        || cacheUpdateQuery;
    var queryField = __1.getOperationFieldName(query);
    return {
        document: document,
        variables: variables,
        updateQuery: function (prev, _a) {
            var _b;
            var subscriptionData = _a.subscriptionData;
            var data = subscriptionData.data;
            var key = Object.keys(data)[0];
            var mutadedItem = data[key];
            var optype = operationType;
            var obj = prev[queryField];
            var updater = exports.getUpdateQueryFunction(optype, idField);
            var result = updater(obj, mutadedItem);
            return _b = {},
                _b[queryField] = result,
                _b;
        }
    };
};
/**
 * Generate the standard update function to update the cache for a given operation type and query.
 * @param opType The type of operation being performed
 * @param idField The id field the item keys off
 */
exports.getUpdateQueryFunction = function (opType, idField) {
    if (idField === void 0) { idField = "id"; }
    var updateFunction;
    switch (opType) {
        case CacheOperation_1.CacheOperation.ADD:
            updateFunction = function (prev, newItem) {
                if (!newItem) {
                    return prev.slice();
                }
                else {
                    return prev.filter(function (item) {
                        return item[idField] !== newItem[idField];
                    }).concat([newItem]);
                }
            };
            break;
        case CacheOperation_1.CacheOperation.REFRESH:
            updateFunction = function (prev, newItem) {
                if (!newItem) {
                    return prev.slice();
                }
                else {
                    return prev.map(function (item) { return item[idField] === newItem[idField] ? newItem : item; });
                }
            };
            break;
        case CacheOperation_1.CacheOperation.DELETE:
            updateFunction = function (prev, newItem) {
                if (!newItem) {
                    return [];
                }
                else {
                    return prev.filter(function (item) { return item[idField] !== newItem[idField]; });
                }
            };
            break;
        default:
            updateFunction = function (prev) { return prev; };
    }
    return updateFunction;
};
//# sourceMappingURL=createSubscriptionOptions.js.map