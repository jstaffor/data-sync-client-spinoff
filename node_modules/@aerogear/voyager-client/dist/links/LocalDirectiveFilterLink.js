"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_link_1 = require("apollo-link");
var apollo_utilities_1 = require("apollo-utilities");
var Constants_1 = require("../config/Constants");
var debug = __importStar(require("debug"));
exports.logger = debug.default(Constants_1.MUTATION_QUEUE_LOGGER);
var LocalDirectiveFilterLink = /** @class */ (function (_super) {
    __extends(LocalDirectiveFilterLink, _super);
    function LocalDirectiveFilterLink() {
        var _this = _super.call(this) || this;
        _this.directiveRemovalConfig = [];
        _this.directiveRemovalConfig = [];
        Constants_1.localDirectivesArray.forEach(function (directive) {
            _this.directiveRemovalConfig.push({ name: directive });
        });
        return _this;
    }
    LocalDirectiveFilterLink.prototype.request = function (operation, forward) {
        exports.logger("Checking if client directives need to be removed on ", operation);
        var clientDirectivesPresent = apollo_utilities_1.hasDirectives(Constants_1.localDirectivesArray, operation.query);
        if (!clientDirectivesPresent) {
            return forward(operation);
        }
        else {
            var newDoc = apollo_utilities_1.removeDirectivesFromDocument(this.directiveRemovalConfig, operation.query);
            if (newDoc) {
                operation.query = newDoc;
                return forward(operation);
            }
            else {
                throw new Error("There was a problem removing client directives from the query.");
            }
        }
    };
    return LocalDirectiveFilterLink;
}(apollo_link_1.ApolloLink));
exports.LocalDirectiveFilterLink = LocalDirectiveFilterLink;
//# sourceMappingURL=LocalDirectiveFilterLink.js.map