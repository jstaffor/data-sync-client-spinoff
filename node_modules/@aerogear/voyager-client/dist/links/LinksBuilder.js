"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_link_1 = require("apollo-link");
var apollo_link_http_1 = require("apollo-link-http");
var apollo_link_retry_1 = require("apollo-link-retry");
var conflicts_1 = require("../conflicts");
var AuthLink_1 = require("./AuthLink");
var AuditLoggingLink_1 = require("./AuditLoggingLink");
var core_1 = require("@aerogear/core");
var LocalDirectiveFilterLink_1 = require("./LocalDirectiveFilterLink");
var apollo_upload_client_1 = require("apollo-upload-client");
var helpers_1 = require("../utils/helpers");
var WebsocketLink_1 = require("./WebsocketLink");
var OfflineLink_1 = require("../offline/OfflineLink");
var offline_1 = require("../offline");
var IDProcessor_1 = require("../cache/IDProcessor");
var ConflictProcesor_1 = require("../conflicts/ConflictProcesor");
/**
 * Method for creating "uber" composite Apollo Link implementation including:
 *
 * - Http support
 * - Websocket support
 * - Offline handling
 * - Conflict resolution
 * - Audit logging
 * - File uploads
 */
exports.createDefaultLink = function (config, offlineLink) { return __awaiter(_this, void 0, void 0, function () {
    var link, wsLink;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.defaultHttpLinks(config, offlineLink)];
            case 1:
                link = _a.sent();
                if (config.wsUrl) {
                    wsLink = WebsocketLink_1.defaultWebSocketLink(config, { uri: config.wsUrl });
                    link = apollo_link_1.ApolloLink.split(helpers_1.isSubscription, wsLink, link);
                }
                return [2 /*return*/, link];
        }
    });
}); };
/**
 * Create offline link
 */
exports.createOfflineLink = function (config, store) { return __awaiter(_this, void 0, void 0, function () {
    var resultProcessors;
    return __generator(this, function (_a) {
        resultProcessors = [
            new IDProcessor_1.IDProcessor(),
            new ConflictProcesor_1.ConflictProcessor(config.conflictStateProvider)
        ];
        return [2 /*return*/, new OfflineLink_1.OfflineLink({
                store: store,
                listener: config.offlineQueueListener,
                networkStatus: config.networkStatus,
                resultProcessors: resultProcessors
            })];
    });
}); };
/**
 * Default HTTP Apollo Links
 * Provides out of the box functionality for:
 *
 * - Offline/Online queue
 * - Conflict resolution
 * - Error handling
 * - Audit logging
 */
exports.defaultHttpLinks = function (config, offlineLink) { return __awaiter(_this, void 0, void 0, function () {
    var mutationOfflineLink, retryLink, localFilterLink, links, _a, _b, httpLink;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                mutationOfflineLink = apollo_link_1.ApolloLink.split(function (op) {
                    return helpers_1.isMutation(op) && !helpers_1.isOnlineOnly(op);
                }, offlineLink);
                retryLink = apollo_link_1.ApolloLink.split(offline_1.OfflineMutationsHandler.isMarkedOffline, new apollo_link_retry_1.RetryLink(config.retryOptions));
                localFilterLink = new LocalDirectiveFilterLink_1.LocalDirectiveFilterLink();
                links = [mutationOfflineLink, retryLink, localFilterLink];
                if (!config.auditLogging) return [3 /*break*/, 2];
                _b = (_a = links).push;
                return [4 /*yield*/, createAuditLoggingLink()];
            case 1:
                _b.apply(_a, [_c.sent()]);
                _c.label = 2;
            case 2:
                if (config.conflictStrategy) {
                    links.push(conflicts_1.conflictLink(config));
                }
                if (config.authContextProvider) {
                    links.push(AuthLink_1.createAuthLink(config));
                }
                if (config.fileUpload) {
                    links.push(apollo_upload_client_1.createUploadLink({
                        uri: config.httpUrl,
                        includeExtensions: config.auditLogging
                    }));
                }
                else {
                    httpLink = new apollo_link_http_1.HttpLink({
                        uri: config.httpUrl,
                        includeExtensions: config.auditLogging
                    });
                    links.push(httpLink);
                }
                return [2 /*return*/, apollo_link_1.ApolloLink.from(links)];
        }
    });
}); };
var createAuditLoggingLink = function () { return __awaiter(_this, void 0, void 0, function () {
    var metricsBuilder, metricsPayload, metrics, _i, metrics_1, metric, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                metricsBuilder = new core_1.DefaultMetricsBuilder();
                metricsPayload = {};
                metrics = metricsBuilder.buildDefaultMetrics();
                _i = 0, metrics_1 = metrics;
                _c.label = 1;
            case 1:
                if (!(_i < metrics_1.length)) return [3 /*break*/, 4];
                metric = metrics_1[_i];
                _a = metricsPayload;
                _b = metric.identifier;
                return [4 /*yield*/, metric.collect()];
            case 2:
                _a[_b] = _c.sent();
                _c.label = 3;
            case 3:
                _i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/, new AuditLoggingLink_1.AuditLoggingLink(metricsBuilder.getClientId(), metricsPayload)];
        }
    });
}); };
//# sourceMappingURL=LinksBuilder.js.map