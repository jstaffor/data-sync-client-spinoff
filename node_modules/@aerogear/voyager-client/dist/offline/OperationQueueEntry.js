"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createOptimisticResponse_1 = require("../cache/createOptimisticResponse");
/**
 * Class representing operation queue entry.
 *
 * It exposes method for forwarding the operation.
 */
var OperationQueueEntry = /** @class */ (function () {
    function OperationQueueEntry(operation, offlineId, forward) {
        this.operation = operation;
        this.forward = forward;
        if (offlineId) {
            this.id = offlineId.toString();
        }
        else {
            this.id = createOptimisticResponse_1.generateId();
        }
        if (typeof operation.getContext === "function") {
            this.optimisticResponse = operation.getContext().optimisticResponse;
        }
    }
    /**
     * Checks if offline operation contains client id or server side id.
     * For new items made when offline changes will always have client side id.
     */
    OperationQueueEntry.prototype.hasClientId = function () {
        return createOptimisticResponse_1.isClientGeneratedId(this.operation.variables.id);
    };
    /**
     * Adapt object in order to persist required information
     */
    OperationQueueEntry.prototype.toOfflineItem = function () {
        return {
            operation: this.operation,
            optimisticResponse: this.optimisticResponse,
            id: this.id
        };
    };
    return OperationQueueEntry;
}());
exports.OperationQueueEntry = OperationQueueEntry;
//# sourceMappingURL=OperationQueueEntry.js.map