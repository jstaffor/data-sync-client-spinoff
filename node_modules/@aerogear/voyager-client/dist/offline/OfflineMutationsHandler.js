"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Constants_1 = require("../config/Constants");
var debug = __importStar(require("debug"));
var helpers_1 = require("../utils/helpers");
exports.logger = debug.default(Constants_1.MUTATION_QUEUE_LOGGER);
/**
 * Class used to send offline changes again after error is sent to user or after application restart.
 * It will trigger saved offline mutations using client to restore all elements in the link.
 */
// TODO rename
var OfflineMutationsHandler = /** @class */ (function () {
    function OfflineMutationsHandler(store, apolloClient, clientConfig) {
        var _this = this;
        this.store = store;
        this.apolloClient = apolloClient;
        /**
         * Replay mutations to client.
         * This operation will help to rebuild Apollo Link observer chain
         * after page refresh/app restart
         */
        this.replayOfflineMutations = function () { return __awaiter(_this, void 0, void 0, function () {
            var offlineData, _i, offlineData_1, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.store.getOfflineData()];
                    case 1:
                        offlineData = _a.sent();
                        // if there is no offline data  then just exit
                        if (offlineData && offlineData.length === 0) {
                            return [2 /*return*/];
                        }
                        exports.logger("Replying offline mutations after application restart");
                        for (_i = 0, offlineData_1 = offlineData; _i < offlineData_1.length; _i++) {
                            item = offlineData_1[_i];
                            this.mutateOfflineElement(item);
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        this.mutationCacheUpdates = clientConfig.mutationCacheUpdates;
    }
    /**
     * Perform mutation using client replicating parameters that user provided into
     *
     * @param item
     */
    OfflineMutationsHandler.prototype.mutateOfflineElement = function (item) {
        return __awaiter(this, void 0, void 0, function () {
            var optimisticResponse, mutationName, updateFunction, mutationOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        optimisticResponse = item.optimisticResponse;
                        mutationName = helpers_1.getMutationName(item.operation.query);
                        if (this.mutationCacheUpdates && mutationName) {
                            updateFunction = this.mutationCacheUpdates[mutationName];
                        }
                        mutationOptions = {
                            variables: item.operation.variables,
                            mutation: item.operation.query,
                            // Restore optimistic response from operation in order to see it
                            optimisticResponse: optimisticResponse,
                            // Pass client update functions
                            update: updateFunction,
                            // Pass extensions as part of the context
                            context: this.getOfflineContext(item.id)
                        };
                        return [4 /*yield*/, this.apolloClient.mutate(mutationOptions)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Add info to operation that was done when offline
     */
    OfflineMutationsHandler.prototype.getOfflineContext = function (id) {
        return { isOffline: true, offlineId: id };
    };
    /**
     * Checks if operation was scheduled to saved to offline queue.
     * This operations have special handling.
     * They are never forwarded when sent back again to client.
     */
    // tslint:disable-next-line:member-ordering
    OfflineMutationsHandler.isMarkedOffline = function (operation) {
        return !!operation.getContext().isOffline;
    };
    return OfflineMutationsHandler;
}());
exports.OfflineMutationsHandler = OfflineMutationsHandler;
//# sourceMappingURL=OfflineMutationsHandler.js.map