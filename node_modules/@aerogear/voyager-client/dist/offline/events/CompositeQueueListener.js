"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/***
 * Wraps multiple listeners allowing them to be
 * registered and unregistered dynamically.
 */
var CompositeQueueListener = /** @class */ (function () {
    /**
     * @param listenerProvider instance that contains all registered providers
     */
    function CompositeQueueListener(listenerProvider) {
        this.listenerProvider = listenerProvider;
    }
    /**
    * Called when new operation is being added to offline queue
    */
    CompositeQueueListener.prototype.onOperationEnqueued = function (operation) {
        this.listenerProvider.queueListeners.forEach(function (listener) {
            if (listener.onOperationEnqueued) {
                listener.onOperationEnqueued(operation);
            }
        });
    };
    /**
     * Called when back online and operation succeeds
     */
    CompositeQueueListener.prototype.onOperationSuccess = function (operation, result) {
        this.listenerProvider.queueListeners.forEach(function (listener) {
            if (listener.onOperationSuccess) {
                listener.onOperationSuccess(operation, result);
            }
        });
    };
    /**
     * Called when back online and operation fails with GraphQL error
     *
     * graphQLError - application error (it means that user need to react to error and sent this operation again)
     * networkError - operation was retried but it did not reached server (it will be reatempted again)
     */
    CompositeQueueListener.prototype.onOperationFailure = function (operation, graphQLError, networkError) {
        this.listenerProvider.queueListeners.forEach(function (listener) {
            if (listener.onOperationFailure) {
                listener.onOperationFailure(operation, graphQLError, networkError);
            }
        });
    };
    /**
     * Called when offline operation queue is cleared
     */
    CompositeQueueListener.prototype.queueCleared = function () {
        this.listenerProvider.queueListeners.forEach(function (listener) {
            if (listener.queueCleared) {
                listener.queueCleared();
            }
        });
    };
    return CompositeQueueListener;
}());
exports.CompositeQueueListener = CompositeQueueListener;
//# sourceMappingURL=CompositeQueueListener.js.map