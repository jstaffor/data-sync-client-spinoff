"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_link_1 = require("apollo-link");
var _1 = require(".");
var OfflineQueue_1 = require("./OfflineQueue");
var debug = __importStar(require("debug"));
var Constants_1 = require("../config/Constants");
var OfflineError_1 = require("./OfflineError");
exports.logger = debug.default(Constants_1.QUEUE_LOGGER);
/**
 * Apollo link implementation used to queue graphql requests.
 *
 * Link will push every incoming operation to queue.
 * All operations that are ready (i.e. they don't use client
 * generated ID) are forwarded to next link when:
 *
 * - client goes online
 * - there is a new operation and client is online
 * - operation was completed (which could result in ID updates, i.e. new
 *   operations ready to be forwarded - see OfflineQueue class)
 */
var OfflineLink = /** @class */ (function (_super) {
    __extends(OfflineLink, _super);
    function OfflineLink(options) {
        var _this = _super.call(this) || this;
        _this.online = false;
        _this.networkStatus = options.networkStatus;
        _this.queue = new OfflineQueue_1.OfflineQueue(options);
        return _this;
    }
    OfflineLink.prototype.request = function (operation, forward) {
        var _this = this;
        // Reattempting operation that was marked as offline
        if (_1.OfflineMutationsHandler.isMarkedOffline(operation)) {
            exports.logger("Enqueueing offline mutation", operation.variables);
            return this.queue.enqueueOfflineChange(operation, forward);
        }
        if (this.online) {
            exports.logger("Online: Forwarding mutation", operation.variables);
            // We are online and can skip this link;
            return forward(operation);
        }
        if (!this.offlineMutationHandler) {
            exports.logger("Error: Offline link setup method was not called");
            return forward(operation);
        }
        var handler = this.offlineMutationHandler;
        return new apollo_link_1.Observable(function (observer) {
            _this.queue.persistItemWithQueue(operation).then(function (operationEntry) {
                // Send mutation request again
                var offlineMutation = handler.mutateOfflineElement(operationEntry);
                exports.logger("Returning offline error to client", operation.variables);
                observer.error(new OfflineError_1.OfflineError(offlineMutation));
            });
            return function () { return; };
        });
    };
    /**
     * Force forward offline operations
     */
    OfflineLink.prototype.forwardOfflineOperations = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queue.forwardOperations()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OfflineLink.prototype.initOnlineState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queue, self, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        queue = this.queue;
                        self = this;
                        _a = this;
                        return [4 /*yield*/, this.networkStatus.isOffline()];
                    case 1:
                        _a.online = !(_b.sent());
                        if (this.online) {
                            queue.forwardOperations();
                        }
                        this.networkStatus.onStatusChangeListener({
                            onStatusChange: function (networkInfo) {
                                self.online = networkInfo.online;
                                if (self.online) {
                                    queue.forwardOperations();
                                }
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    OfflineLink.prototype.setup = function (handler) {
        this.offlineMutationHandler = handler;
    };
    return OfflineLink;
}(apollo_link_1.ApolloLink));
exports.OfflineLink = OfflineLink;
//# sourceMappingURL=OfflineLink.js.map