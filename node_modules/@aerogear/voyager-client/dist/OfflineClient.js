"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_client_1 = require("apollo-client");
var SyncConfig_1 = require("./config/SyncConfig");
var LinksBuilder_1 = require("./links/LinksBuilder");
var offline_1 = require("./offline");
var OfflineMutationsHandler_1 = require("./offline/OfflineMutationsHandler");
var CompositeQueueListener_1 = require("./offline/events/CompositeQueueListener");
var defaultStorage_1 = require("./offline/storage/defaultStorage");
var cache_1 = require("./cache");
/**
* Factory for creating Apollo Offline Client
*
* @param userConfig options object used to build client
* @deprecated use OfflineClient class directly:
* ```javascript
*  const offlineClient = new OfflineClient(config);
*  await offlineClient.init();
*  ```
*/
exports.createClient = function (userConfig) { return __awaiter(_this, void 0, void 0, function () {
    var offlineClient;
    return __generator(this, function (_a) {
        offlineClient = new OfflineClient(userConfig);
        return [2 /*return*/, offlineClient.init()];
    });
}); };
/**
 * OfflineClient
 *
 * Enables offline workflows, conflict resolution and cache
 * storage on top Apollo GraphQL JavaScript client.
 *
 * Usage:
 *
 *  ```javascript
 *  const offlineClient = new OfflineClient(config);
 *  await offlineClient.init();
 *  ```
 */
var OfflineClient = /** @class */ (function () {
    function OfflineClient(userConfig) {
        this.queueListeners = [];
        this.config = new SyncConfig_1.SyncConfig(userConfig);
        this.store = new offline_1.OfflineStore(this.config);
        this.setupEventListeners();
    }
    /**
    * Initialize client
    */
    OfflineClient.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache, offlineLink, link, client;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.store.init()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, defaultStorage_1.buildCachePersistence(this.config.cacheStorage)];
                    case 2:
                        cache = _a.sent();
                        return [4 /*yield*/, LinksBuilder_1.createOfflineLink(this.config, this.store)];
                    case 3:
                        offlineLink = _a.sent();
                        return [4 /*yield*/, LinksBuilder_1.createDefaultLink(this.config, offlineLink)];
                    case 4:
                        link = _a.sent();
                        client = new apollo_client_1.ApolloClient({
                            link: link,
                            cache: cache
                        });
                        this.apolloClient = this.decorateApolloClient(client);
                        return [4 /*yield*/, this.restoreOfflineOperations(offlineLink)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, this.apolloClient];
                }
            });
        });
    };
    Object.defineProperty(OfflineClient.prototype, "offlineStore", {
        /**
         * Get access to offline store that can be used to
         * visualize  offline  operations that are currently pending
         */
        get: function () {
            return this.store;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Add new listener for listening for queue changes
     *
     * @param listener
     */
    OfflineClient.prototype.registerOfflineEventListener = function (listener) {
        this.queueListeners.push(listener);
    };
    /**
     * Offline wrapper for apollo mutations. Provide Mutation Helper Options and use
     * this offline friendly function to handle the optimistic UI and cache updates.
     * @param options the MutationHelperOptions to create the mutation
     */
    OfflineClient.prototype.offlineMutation = function (options) {
        if (!this.apolloClient) {
            throw new Error("Apollo offline client not initialised before mutation called.");
        }
        else {
            return this.apolloClient.mutate(cache_1.createMutationOptions(options));
        }
    };
    OfflineClient.prototype.decorateApolloClient = function (apolloClient) {
        apolloClient.offlineStore = this.offlineStore;
        apolloClient.registerOfflineEventListener = this.registerOfflineEventListener.bind(this);
        apolloClient.offlineMutation = this.offlineMutation.bind(this);
        return apolloClient;
    };
    /**
     * Restore offline operations into the queue
     */
    OfflineClient.prototype.restoreOfflineOperations = function (offlineLink) {
        return __awaiter(this, void 0, void 0, function () {
            var offlineMutationHandler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        offlineMutationHandler = new OfflineMutationsHandler_1.OfflineMutationsHandler(this.store, this.apolloClient, this.config);
                        offlineLink.setup(offlineMutationHandler);
                        // Reschedule offline mutations for new client instance
                        return [4 /*yield*/, offlineMutationHandler.replayOfflineMutations()];
                    case 1:
                        // Reschedule offline mutations for new client instance
                        _a.sent();
                        // After pushing all online changes check and set network status
                        return [4 /*yield*/, offlineLink.initOnlineState()];
                    case 2:
                        // After pushing all online changes check and set network status
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OfflineClient.prototype.setupEventListeners = function () {
        // Check if user provided legacy listener
        // To provide backwards compatibility we ignore this case
        if (!this.config.offlineQueueListener) {
            this.config.offlineQueueListener = new CompositeQueueListener_1.CompositeQueueListener(this);
        }
    };
    return OfflineClient;
}());
exports.OfflineClient = OfflineClient;
//# sourceMappingURL=OfflineClient.js.map