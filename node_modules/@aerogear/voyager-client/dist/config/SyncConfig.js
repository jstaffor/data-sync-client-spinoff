"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@aerogear/core");
var ConfigError_1 = require("./ConfigError");
var offline_1 = require("../offline");
var strategies_1 = require("../conflicts/strategies");
var VersionedState_1 = require("../conflicts/VersionedState");
var defaultStorage_1 = require("../offline/storage/defaultStorage");
// Legacy platform configuration that needs to be merged into sync configuration
var TYPE = "sync-app";
/**
 * Class for managing user and default configuration.
 * Default config is applied on top of user provided configuration
 */
var SyncConfig = /** @class */ (function () {
    function SyncConfig(clientOptions) {
        this.auditLogging = false;
        this.conflictStateProvider = new VersionedState_1.VersionedState();
        this.retryOptions = {
            delay: {
                initial: 1000,
                max: Infinity,
                jitter: true
            },
            attempts: {
                max: 5
            }
        };
        if (clientOptions && clientOptions.storage) {
            this.cacheStorage = clientOptions.storage;
            this.offlineStorage = clientOptions.storage;
        }
        else {
            this.cacheStorage = defaultStorage_1.createDefaultCacheStorage();
            this.offlineStorage = defaultStorage_1.createDefaultOfflineStorage();
        }
        this.networkStatus = (core_1.isMobileCordova()) ?
            new offline_1.CordovaNetworkStatus() : new offline_1.WebNetworkStatus();
        if (clientOptions && clientOptions.conflictStrategy) {
            this.conflictStrategy = clientOptions.conflictStrategy;
            if (!clientOptions.conflictStrategy.default) {
                this.conflictStrategy.default = strategies_1.clientWins;
            }
        }
        else {
            this.conflictStrategy = { default: strategies_1.clientWins };
        }
        this.init(clientOptions);
    }
    SyncConfig.prototype.init = function (clientOptions) {
        Object.assign(this, clientOptions);
        this.applyPlatformConfig();
        this.validate();
    };
    /**
    * Platform configuration that is generated and supplied by OpenShift
    *
    * @param config user supplied configuration
    */
    SyncConfig.prototype.applyPlatformConfig = function () {
        if (this.openShiftConfig) {
            var configuration = this.openShiftConfig.getConfigByType(TYPE);
            if (configuration && configuration.length > 0) {
                var serviceConfiguration = configuration[0];
                this.httpUrl = serviceConfiguration.url;
                this.wsUrl = serviceConfiguration.config.websocketUrl;
            }
        }
    };
    SyncConfig.prototype.validate = function () {
        if (!this.httpUrl) {
            throw new ConfigError_1.ConfigError("Missing server URL", "httpUrl");
        }
    };
    return SyncConfig;
}());
exports.SyncConfig = SyncConfig;
//# sourceMappingURL=SyncConfig.js.map