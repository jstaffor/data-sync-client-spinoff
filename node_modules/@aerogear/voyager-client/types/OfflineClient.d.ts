import { DataSyncConfig } from "./config";
import { OfflineStore, OfflineQueueListener } from "./offline";
import { OfflineLink } from "./offline/OfflineLink";
import { ListenerProvider } from "./offline/events/ListenerProvider";
import { ApolloOfflineClient } from "./OfflineApolloClient";
import { MutationHelperOptions } from "./cache";
import { FetchResult } from "apollo-link";
/**
* Factory for creating Apollo Offline Client
*
* @param userConfig options object used to build client
* @deprecated use OfflineClient class directly:
* ```javascript
*  const offlineClient = new OfflineClient(config);
*  await offlineClient.init();
*  ```
*/
export declare const createClient: (userConfig: DataSyncConfig) => Promise<ApolloOfflineClient>;
/**
 * OfflineClient
 *
 * Enables offline workflows, conflict resolution and cache
 * storage on top Apollo GraphQL JavaScript client.
 *
 * Usage:
 *
 *  ```javascript
 *  const offlineClient = new OfflineClient(config);
 *  await offlineClient.init();
 *  ```
 */
export declare class OfflineClient implements ListenerProvider {
    queueListeners: OfflineQueueListener[];
    private apolloClient?;
    private store;
    private config;
    constructor(userConfig: DataSyncConfig);
    /**
    * Initialize client
    */
    init(): Promise<ApolloOfflineClient>;
    /**
     * Get access to offline store that can be used to
     * visualize  offline  operations that are currently pending
     */
    readonly offlineStore: OfflineStore;
    /**
     * Add new listener for listening for queue changes
     *
     * @param listener
     */
    registerOfflineEventListener(listener: OfflineQueueListener): void;
    /**
     * Offline wrapper for apollo mutations. Provide Mutation Helper Options and use
     * this offline friendly function to handle the optimistic UI and cache updates.
     * @param options the MutationHelperOptions to create the mutation
     */
    offlineMutation<T>(options: MutationHelperOptions): Promise<FetchResult<T>>;
    protected decorateApolloClient(apolloClient: any): ApolloOfflineClient;
    /**
     * Restore offline operations into the queue
     */
    protected restoreOfflineOperations(offlineLink: OfflineLink): Promise<void>;
    private setupEventListeners;
}
