import { OperationQueueEntry } from "./OperationQueueEntry";
import { Operation, NextLink, Observable, FetchResult } from "apollo-link";
import { OfflineLinkOptions } from "../links";
export declare type OperationQueueChangeHandler = (entry: OperationQueueEntry) => void;
/**
 * Class implementing persistent operation queue.
 *
 * This class is designed to be used by OfflineLink
 * It provides these functionalities:
 *
 * - persisting operation queue in provided storage
 * - updating client IDs with server IDs (explained below)
 */
export declare class OfflineQueue {
    queue: OperationQueueEntry[];
    private readonly listener?;
    private readonly state?;
    private store;
    private resultProcessors;
    constructor(options: OfflineLinkOptions);
    /**
     * Persist entire queue with the new item to make sure that change
     * is going to be working across restarts
     */
    persistItemWithQueue(operation: Operation): Promise<OperationQueueEntry>;
    /**
     * Enqueue offline change and wait for it to be sent to server when online.
     * Every offline change is added to queue.
     *
     */
    enqueueOfflineChange(operation: Operation, forward: NextLink): Observable<{}>;
    forwardOperations(): Promise<void>;
    executeResultProcessors(op: OperationQueueEntry, result: FetchResult<any>): void;
    private onForwardError;
    private onForwardNext;
}
