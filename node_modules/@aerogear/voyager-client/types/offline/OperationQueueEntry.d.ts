/// <reference types="zen-observable" />
import { FetchResult, NextLink, Operation } from "apollo-link";
/**
 * Represents data that is being saved to the offlien store
 */
export interface OfflineItem {
    operation: Operation;
    optimisticResponse?: any;
    id: string;
}
/**
 * Class representing operation queue entry.
 *
 * It exposes method for forwarding the operation.
 */
export declare class OperationQueueEntry implements OfflineItem {
    readonly operation: Operation;
    readonly optimisticResponse?: any;
    id: string;
    forward?: NextLink;
    result?: FetchResult;
    networkError: any;
    observer?: ZenObservable.SubscriptionObserver<FetchResult>;
    constructor(operation: Operation, offlineId?: number, forward?: NextLink);
    /**
     * Checks if offline operation contains client id or server side id.
     * For new items made when offline changes will always have client side id.
     */
    hasClientId(): boolean | "";
    /**
     * Adapt object in order to persist required information
     */
    toOfflineItem(): OfflineItem;
}
