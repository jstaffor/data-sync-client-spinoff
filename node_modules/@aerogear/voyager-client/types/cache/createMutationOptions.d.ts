import { MutationOptions, OperationVariables, MutationUpdaterFn } from "apollo-client";
import { DocumentNode } from "graphql";
import { CacheOperation } from "./CacheOperation";
import { Query } from "./CacheUpdates";
export interface MutationHelperOptions {
    mutation: DocumentNode;
    variables: OperationVariables;
    updateQuery: Query | Query[];
    typeName: string;
    operationType?: CacheOperation;
    idField?: string;
}
export declare const createMutationOptions: (options: MutationHelperOptions) => MutationOptions<{
    [key: string]: any;
}, OperationVariables>;
/**
 * Generate the update function to update the cache for a given operation and query.
 * Ignores the scenario where the cache operation is an update as this is handled automatically
 * from Apollo Client 2.5 onwards.
 * @param operation The title of the operation being performed
 * @param idField The id field the item keys off
 * @param updateQuery The Query to update in the cache
 * @param opType The type of operation being performed
 */
export declare const getUpdateFunction: (operation: string, idField: string, updateQuery: Query, opType: CacheOperation) => MutationUpdaterFn<{
    [key: string]: any;
}>;
