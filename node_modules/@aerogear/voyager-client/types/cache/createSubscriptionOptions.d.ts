import { SubscribeToMoreOptions, OperationVariables, ObservableQuery } from "apollo-client";
import { UpdateFunction, Query } from "./CacheUpdates";
import { CacheOperation } from "./CacheOperation";
export interface SubscriptionHelperOptions {
    subscriptionQuery: Query;
    cacheUpdateQuery: Query;
    operationType: CacheOperation;
    idField?: string;
}
/**
 * Helper function which can be used to call subscribeToMore for multiple SubscriptionHelperOptions
 * @param observableQuery the query which you would like to call subscribeToMore on.
 * @param arrayOfHelperOptions the array of `SubscriptionHelperOptions`
 */
export declare const subscribeToMoreHelper: (observableQuery: ObservableQuery<any, OperationVariables>, arrayOfHelperOptions: SubscriptionHelperOptions[]) => void;
/**
 * Creates a SubscribeToMoreOptions object which can be used with Apollo Client's subscribeToMore function
 * on an observable query.
 * @param options see `SubscriptionHelperOptions`
 */
export declare const createSubscriptionOptions: (options: SubscriptionHelperOptions) => SubscribeToMoreOptions<any, OperationVariables, any>;
/**
 * Generate the standard update function to update the cache for a given operation type and query.
 * @param opType The type of operation being performed
 * @param idField The id field the item keys off
 */
export declare const getUpdateQueryFunction: (opType: CacheOperation, idField?: string) => UpdateFunction;
